# -*- coding: utf-8 -*-
"""beijing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/102j7x97FmRa0ppG7BteOtJ6hFH6yQBDt
"""

# Commented out IPython magic to ensure Python compatibility.
!unzip PRSA2017_Data_20130301-20170228.zip
# %cd "/content/PRSA_Data_20130301-20170228"

import os
import random
files = os.listdir()
final_path = random.choice(files)
print(final_path)

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

air = pd.read_csv(final_path)

air.head()

count = air.isna().sum()
count[count > 0]

sns.heatmap(air.corr(), cmap = 'Blues')

air.corr()

bools = np.array(air['PM10'] == air['PM2.5'])
len(bools[bools == False])

air = air.drop(['NO2', 'O3', 'CO'], axis = 1)

air = air.dropna()

air.isna().sum()

air.shape

from sklearn.model_selection import train_test_split
X = air.drop(['PM2.5'], axis = 1)
y = air['PM2.5']

X_train, y_train, X_test, y_test = train_test_split(X, y, test_size = 0.2, random_state = 101)

!pip install scikit-multiflow --quiet

# Imports
from skmultiflow.data import RegressionGenerator
from skmultiflow.trees import HoeffdingTreeRegressor
import numpy as np
# Setup a data stream
stream = RegressionGenerator(random_state=1, n_samples=10000)
# Setup the Hoeffding Tree Regressor
ht_reg = HoeffdingTreeRegressor()
# Auxiliary variables to control loop and track performance
n_samples = 0
max_samples = 100000
y_pred = np.zeros(max_samples)
y_true = np.zeros(max_samples)
# Run test-then-train loop for max_samples and while there is data
while n_samples < max_samples and stream.has_more_samples():
    X_train, y_train = stream.next_sample()
    y_true[n_samples] = y[0]
    y_pred[n_samples] = ht_reg.predict(X_train)[0]
    ht_reg.partial_fit(X_train, y_train)
    n_samples += 1
# Display results
print('{} samples analyzed.'.format(n_samples))
print('Hoeffding Tree regressor mean absolute error: {}'.
      format(np.mean(np.abs(y_true - y_pred))))

ht_reg.new_split_node(X_test, X_train)

ht_reg.get_params(deep = True)

ht_reg.measure_tree_depth()

print(ht_reg.get_model_description())

ht_reg.get_model_measurements

